package espotify.presentacion;

import espotify.DataTypes.DTAlbum_Simple;
import espotify.DataTypes.DTTemaSimple;
import espotify.logica.Fabrica;
import espotify.logica.IControlador;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class AgregarTemaALista extends javax.swing.JInternalFrame {

    private final IControlador controlador;
    private DefaultComboBoxModel comboBoxDeListasModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel comboBoxListasOAlbumsModel = new DefaultComboBoxModel();
    private DefaultListModel jlistTemasModel = new DefaultListModel();
    private DefaultListModel temasDeListaSeleccionadaModel = new DefaultListModel();
    
    private final List<String> nicknamesClientes;
    private List<String> listaNombresDeListasGenericas;
    private List<String> listaNombresListasParticularesPublicas;
    private List<String> listaNombresListasPorDefecto;
    private Map<Long, String> mapAlbums;
    private Map<Long, String> mapTemas = new HashMap();
    private Map<Long, DTTemaSimple> mapDataTemas = new HashMap();
    private List<DTAlbum_Simple> listaDeDTAlbums;
    /**
     * Creates new form AgregarTemaALista
     */
    public AgregarTemaALista() {
        Fabrica fb = Fabrica.getInstance();
        controlador = fb.getControlador();
        nicknamesClientes = controlador.getNicknamesClientes();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        comboBoxTipoLista = new javax.swing.JComboBox<>();
        btnConfirmarAgregarTemaALista = new javax.swing.JButton();
        btnCancelarAgregarTemaALista = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        comboBoxTipoDeOrigenTema = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxClientes = new javax.swing.JComboBox<>();
        comboBoxListasReproduccion = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        comboBoxListasOAlbums = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistTemas = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlistTemasDeListaSeleccionada = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Agregar Tema a Lista de Reproducci√≥n");

        jLabel5.setText("Tipo de lista: ");

        comboBoxTipoLista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Lista por defecto", "Lista particular" }));
        comboBoxTipoLista.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTipoListaItemStateChanged(evt);
            }
        });
        comboBoxTipoLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTipoListaActionPerformed(evt);
            }
        });
        comboBoxTipoLista.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                comboBoxTipoListaPropertyChange(evt);
            }
        });

        btnConfirmarAgregarTemaALista.setText("Agregar Tema");
        btnConfirmarAgregarTemaALista.setSelected(true);
        btnConfirmarAgregarTemaALista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarAgregarTemaAListaActionPerformed(evt);
            }
        });

        btnCancelarAgregarTemaALista.setText("Salir");
        btnCancelarAgregarTemaALista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarAgregarTemaAListaActionPerformed(evt);
            }
        });

        jLabel6.setText("Seleccione la lista a la cual agregar el tema:");

        comboBoxTipoDeOrigenTema.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Lista por defecto", "Lista particular publica", "Album" }));
        comboBoxTipoDeOrigenTema.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTipoDeOrigenTemaItemStateChanged(evt);
            }
        });
        comboBoxTipoDeOrigenTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTipoDeOrigenTemaActionPerformed(evt);
            }
        });

        jLabel3.setText("Seleccione el tema que desea agregar:");

        jLabel4.setText("Cliente:");

        String[] arrayNicknamesClientes = nicknamesClientes.toArray(new String[nicknamesClientes.size()]);
        comboBoxClientes.setModel(new javax.swing.DefaultComboBoxModel<>(arrayNicknamesClientes));
        comboBoxClientes.setToolTipText("");
        comboBoxClientes.setEnabled(false);
        comboBoxClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClientesItemStateChanged(evt);
            }
        });
        comboBoxClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClientesActionPerformed(evt);
            }
        });

        comboBoxListasReproduccion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxListasReproduccionItemStateChanged(evt);
            }
        });

        jLabel1.setText("Lista de reproduccion:");

        comboBoxListasOAlbums.setEnabled(false);
        comboBoxListasOAlbums.setMaximumSize(new java.awt.Dimension(585, 600));
        comboBoxListasOAlbums.setPreferredSize(new java.awt.Dimension(585, 24));
        comboBoxListasOAlbums.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxListasOAlbumsItemStateChanged(evt);
            }
        });

        jLabel2.setText("Elija la lista o album del cual desea seleccionar el tema:");

        jlistTemas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlistTemas.setEnabled(false);
        jScrollPane1.setViewportView(jlistTemas);

        jLabel8.setText("Temas de la lista seleccionada:");

        jlistTemasDeListaSeleccionada.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jlistTemasDeListaSeleccionada);

        jLabel9.setText("Seleccione de donde desea elegir el tema:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxTipoLista, 0, 260, Short.MAX_VALUE)
                                    .addComponent(comboBoxListasReproduccion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxClientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxTipoDeOrigenTema, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxListasOAlbums, 0, 1, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCancelarAgregarTemaALista, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnConfirmarAgregarTemaALista, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxTipoLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxTipoDeOrigenTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboBoxListasReproduccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxListasOAlbums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarAgregarTemaALista)
                    .addComponent(btnConfirmarAgregarTemaALista))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxTipoListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTipoListaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTipoListaActionPerformed

    private void comboBoxTipoListaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_comboBoxTipoListaPropertyChange
        //
    }//GEN-LAST:event_comboBoxTipoListaPropertyChange

    private void btnCancelarAgregarTemaAListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarAgregarTemaAListaActionPerformed
       this.dispose();
    }//GEN-LAST:event_btnCancelarAgregarTemaAListaActionPerformed

    private void comboBoxTipoListaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTipoListaItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            comboBoxDeListasModel.removeAllElements();
            
            if (comboBoxTipoLista.getSelectedItem().toString().equals("Lista particular")) {
                comboBoxListasReproduccion.setEnabled(true);
                
                if (comboBoxClientes.getSelectedItem() != null) {
                    comboBoxClientes.setEnabled(true);
                    String nickname = comboBoxClientes.getSelectedItem().toString();
                    try {
                        listaNombresDeListasGenericas = controlador.getNombresListasParticularesDeCliente(nickname);
                        for (String nombreLista : listaNombresDeListasGenericas) {
                            comboBoxDeListasModel.addElement(nombreLista);
                        }
                    comboBoxListasReproduccion.setModel(comboBoxDeListasModel);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(
                        null, 
                        ex.getMessage(), 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
                    }
                }
                
                
            } else if (comboBoxTipoLista.getSelectedItem().toString().equals("Lista por defecto")){
                comboBoxListasReproduccion.setEnabled(true);
                comboBoxClientes.setEnabled(false);
                listaNombresDeListasGenericas = controlador.getNombresListasPorDefecto();
                
                for (String nombreLista : listaNombresDeListasGenericas) {
                    comboBoxDeListasModel.addElement(nombreLista);
                }
                comboBoxListasReproduccion.setModel(comboBoxDeListasModel);
                
            } else {
                comboBoxClientes.setEnabled(false);
                comboBoxListasReproduccion.setEnabled(false);
            }
            cargarTemasDeListaSeleccionada();
        }
    }//GEN-LAST:event_comboBoxTipoListaItemStateChanged

    private void comboBoxTipoDeOrigenTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTipoDeOrigenTemaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTipoDeOrigenTemaActionPerformed

    private Boolean validarSeleccion() {
        if (comboBoxTipoLista.getSelectedItem() == null) return false;
        
        if (comboBoxTipoLista.getSelectedItem().equals("Seleccionar")) return false;
        
        if (comboBoxTipoLista.getSelectedItem().equals("Lista particular") 
            && comboBoxClientes.getSelectedItem() == null) return false;
        
        if (comboBoxListasReproduccion.getSelectedItem() == null) return false;
        
        return true;
    }
    
    private void btnConfirmarAgregarTemaAListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarAgregarTemaAListaActionPerformed
        
        if (!validarSeleccion()) {
            JOptionPane.showMessageDialog(
                        null, 
                        "Debe indicar a que lista desea agregar el tema.", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
        } else if (jlistTemas.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(
                        null, 
                        "Debe indicar el tema que desea agregar.", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
        } else {
            String listaDestino = comboBoxListasReproduccion.getSelectedItem().toString();
            String temaSeleccionado = jlistTemas.getSelectedValue();
            
            Long idTema = null;
            for (Entry<Long, String> entry : mapTemas.entrySet()) {
                if (entry.getValue().equals(temaSeleccionado)) {
                    idTema = entry.getKey();
                    break;
                }
            }
            
            try {
                controlador.agregarTemaALista(idTema, listaDestino);
                JOptionPane.showMessageDialog(
                        null, 
                        "El tema fue agregado exitosamente a la lista.", 
                        "Operacion Exitosa", 
                        JOptionPane.INFORMATION_MESSAGE);
                cargarTemasDeListaSeleccionada();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        null, 
                        ex.getMessage(), 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_btnConfirmarAgregarTemaAListaActionPerformed

    private void cargarTemasDeListaSeleccionada() {
        
        temasDeListaSeleccionadaModel.removeAllElements();

        if (comboBoxListasReproduccion.getSelectedItem() != null) {
            String tipoDeLista = comboBoxTipoLista.getSelectedItem().toString();
            String listaRep = comboBoxListasReproduccion.getSelectedItem().toString();
            Map<Long, DTTemaSimple> temasDeLista;
            
            if (tipoDeLista.equals("Lista por defecto")) {
                temasDeLista = controlador.getDTTemasDeListaPorDefecto(listaRep);
            } else if (tipoDeLista.equals("Lista particular")) {
                temasDeLista = controlador.getDTTemasDeListaParticular(listaRep);
            } else {
                return;
            }
            
            for (Entry<Long, DTTemaSimple> dataTema : temasDeLista.entrySet()) {
                temasDeListaSeleccionadaModel.addElement(dataTema.getValue().getDatosTemaToString());
            }
            
            jlistTemasDeListaSeleccionada.setModel(temasDeListaSeleccionadaModel);
        }
    }
    
    private void comboBoxTipoDeOrigenTemaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTipoDeOrigenTemaItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            comboBoxListasOAlbumsModel.removeAllElements();
            
            if (comboBoxTipoDeOrigenTema.getSelectedItem().toString().equals("Lista particular publica")) {
                
                //habilito la seleccion del jlist
                comboBoxListasOAlbums.setEnabled(true);
                //obtengo las listas particulares publicas
                listaNombresListasParticularesPublicas = controlador.getNombresListasParticularesPublicas();
                //las cargo en el jlist por medio del list model
                for (String nombreLista : listaNombresListasParticularesPublicas) {
                    comboBoxListasOAlbumsModel.addElement(nombreLista);
                }
                comboBoxListasOAlbums.setModel(comboBoxListasOAlbumsModel);
                
            } else if (comboBoxTipoDeOrigenTema.getSelectedItem().toString().equals("Lista por defecto")) {
                comboBoxListasOAlbums.setEnabled(true);
                listaNombresListasPorDefecto = controlador.getNombresListasPorDefecto();
                
                for (String nombreLista : listaNombresListasPorDefecto) {
                    comboBoxListasOAlbumsModel.addElement(nombreLista);
                }
                comboBoxListasOAlbums.setModel(comboBoxListasOAlbumsModel);
                
            } else if (comboBoxTipoDeOrigenTema.getSelectedItem().toString().equals("Album")) {
                comboBoxListasOAlbums.setEnabled(true);
                listaDeDTAlbums = controlador.getDTAlbumesSimple();
                mapAlbums = new HashMap<Long, String>(listaDeDTAlbums.size());
                
                for (DTAlbum_Simple dtAlbum : listaDeDTAlbums) {
                    mapAlbums.put(dtAlbum.getIdAlbum(), dtAlbum.datosToString());
                    comboBoxListasOAlbumsModel.addElement(dtAlbum.datosToString());
                }
                comboBoxListasOAlbums.setModel(comboBoxListasOAlbumsModel);
                
            } else {
                comboBoxListasOAlbums.setEnabled(false);
            }
            cargarTemas();
        }
    }//GEN-LAST:event_comboBoxTipoDeOrigenTemaItemStateChanged

    private void cargarTemas() {
        jlistTemasModel.removeAllElements();
        
        if (comboBoxListasOAlbums.getSelectedItem() != null) {

            jlistTemas.setEnabled(true);
            
            mapTemas.clear();
            mapDataTemas.clear();

            String seleccion =  comboBoxListasOAlbums.getSelectedItem().toString();
            String tipoDeOrigen = comboBoxTipoDeOrigenTema.getSelectedItem().toString();

            if (tipoDeOrigen.equals("Lista particular publica")) {
                mapDataTemas = controlador.getDTTemasDeListaParticular(seleccion);
            } else if (tipoDeOrigen.equals("Lista por defecto")) {
                mapDataTemas = controlador.getDTTemasDeListaPorDefecto(seleccion);
            } else {
                Long idAlbum = null;

                for (Entry<Long, String> entry : mapAlbums.entrySet()) {
                    if (entry.getValue().equals(seleccion)) {
                        idAlbum = entry.getKey();
                        break;
                    }
                }
                mapDataTemas = controlador.getDTTemasDeAlbum(idAlbum);
            }

            mapTemas = new HashMap(mapDataTemas.size());

            for (Entry<Long, DTTemaSimple> entry : mapDataTemas.entrySet()) {
                mapTemas.put(entry.getKey(), entry.getValue().getDatosTemaToString());
                jlistTemasModel.addElement(entry.getValue().getDatosTemaToString());

            }

            jlistTemas.setModel(jlistTemasModel);

        } else {
            jlistTemas.setEnabled(false);
        }
    }
    
    private void comboBoxListasOAlbumsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxListasOAlbumsItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cargarTemas();
        }
    }//GEN-LAST:event_comboBoxListasOAlbumsItemStateChanged

    private void comboBoxClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxClientesActionPerformed

    private void cargarComboBoxClientes() {
        comboBoxDeListasModel.removeAllElements();

        if (comboBoxClientes.getSelectedItem() !=  null) {
            String nickname = comboBoxClientes.getSelectedItem().toString();
            try {
                listaNombresDeListasGenericas = controlador.getNombresListasParticularesDeCliente(nickname);
                for (String nombreLista : listaNombresDeListasGenericas) {
                    comboBoxDeListasModel.addElement(nombreLista);
                }
            comboBoxListasReproduccion.setModel(comboBoxDeListasModel);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                    null, 
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void comboBoxClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClientesItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cargarComboBoxClientes();
        }
    }//GEN-LAST:event_comboBoxClientesItemStateChanged

    private void comboBoxListasReproduccionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxListasReproduccionItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cargarTemasDeListaSeleccionada();
        }
    }//GEN-LAST:event_comboBoxListasReproduccionItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarAgregarTemaALista;
    private javax.swing.JButton btnConfirmarAgregarTemaALista;
    private javax.swing.JComboBox<String> comboBoxClientes;
    private javax.swing.JComboBox<String> comboBoxListasOAlbums;
    private javax.swing.JComboBox<String> comboBoxListasReproduccion;
    private javax.swing.JComboBox<String> comboBoxTipoDeOrigenTema;
    private javax.swing.JComboBox<String> comboBoxTipoLista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<String> jlistTemas;
    private javax.swing.JList<String> jlistTemasDeListaSeleccionada;
    // End of variables declaration//GEN-END:variables
}

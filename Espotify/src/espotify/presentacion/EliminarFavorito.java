/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package espotify.presentacion;

import espotify.logica.Fabrica;
import espotify.logica.IControlador;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author brisa
 */
public class EliminarFavorito extends javax.swing.JInternalFrame {
    private IControlador controlador;
    private String nickIngresado;
    private Map<Long, String>  temasFavoritosDelCliente = new HashMap<>();
    private ArrayList<String> listasFavoritasDelCliente = new ArrayList<>();
    private Map<Long, String> albumsFavoritosDelCliente = new HashMap<>();
    /**
     * Creates new form EliminarFavorito
     */
    public EliminarFavorito() {
        Fabrica fb = Fabrica.getInstance();
        controlador = fb.getControlador();
        initComponents();
        inicializarJLists();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nickLabel = new javax.swing.JLabel();
        nickname = new javax.swing.JTextField();
        pestañas = new javax.swing.JTabbedPane();
        pesTema = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaTemas = new javax.swing.JList<>();
        deleteTema = new javax.swing.JButton();
        pesLista = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaLReproduccion = new javax.swing.JList<>();
        deleteLista = new javax.swing.JButton();
        pesAlbum = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaAlbumes = new javax.swing.JList<>();
        deleteAlbum = new javax.swing.JButton();
        botonNick = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Eliminar Tema/Lista/Album");

        nickLabel.setText("Nickname cliente:");

        nickname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicknameActionPerformed(evt);
            }
        });

        listaTemas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaTemas);

        deleteTema.setText("Eliminar de favoritos");
        deleteTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTemaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pesTemaLayout = new javax.swing.GroupLayout(pesTema);
        pesTema.setLayout(pesTemaLayout);
        pesTemaLayout.setHorizontalGroup(
            pesTemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesTemaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(deleteTema)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        pesTemaLayout.setVerticalGroup(
            pesTemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesTemaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pesTemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteTema)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pestañas.addTab("Temas", pesTema);

        listaLReproduccion.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listaLReproduccion);

        deleteLista.setText("Eliminar de favoritos");
        deleteLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteListaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pesListaLayout = new javax.swing.GroupLayout(pesLista);
        pesLista.setLayout(pesListaLayout);
        pesListaLayout.setHorizontalGroup(
            pesListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesListaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(deleteLista)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        pesListaLayout.setVerticalGroup(
            pesListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesListaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pesListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteLista)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 46, Short.MAX_VALUE))
        );

        pestañas.addTab("Listas", pesLista);

        listaAlbumes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listaAlbumes);

        deleteAlbum.setText("Eliminar de favoritos");
        deleteAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAlbumActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pesAlbumLayout = new javax.swing.GroupLayout(pesAlbum);
        pesAlbum.setLayout(pesAlbumLayout);
        pesAlbumLayout.setHorizontalGroup(
            pesAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesAlbumLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(deleteAlbum)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        pesAlbumLayout.setVerticalGroup(
            pesAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pesAlbumLayout.createSequentialGroup()
                .addGroup(pesAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pesAlbumLayout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(deleteAlbum))
                    .addGroup(pesAlbumLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pestañas.addTab("Albumes", pesAlbum);

        botonNick.setText("Buscar");
        botonNick.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonNickMouseClicked(evt);
            }
        });
        botonNick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNickActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(nickLabel)
                .addGap(18, 18, 18)
                .addComponent(nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonNick)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pestañas, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nickLabel)
                    .addComponent(nickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonNick))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(pestañas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nicknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicknameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nicknameActionPerformed

    private void deleteTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTemaActionPerformed
        // TODO add your handling code here:
        //este boton confirmaria eliminar tema de favoritos
        String tema = listaTemas.getSelectedValue();
        Long idtemaSeleccionado = null;
        for (Entry<Long, String> entry : this.temasFavoritosDelCliente.entrySet()){
            if(entry.getValue().equals(tema)){
                
                idtemaSeleccionado = entry.getKey();
                
                break;
            }
        }
        //Verifica si se selecciono Tema
        if(tema !=null && idtemaSeleccionado != null){
            try{
                System.out.println("ACA");
                this.controlador.EliminarTemaFavorito(nickIngresado, idtemaSeleccionado);
                JOptionPane.showMessageDialog(null, "Tema eliminado de favoritos", "Operacion Exitosa", JOptionPane.INFORMATION_MESSAGE);
            }catch(Exception ex){
                System.out.println("ACA2");
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);  
            }
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione un Tema.", "Error", JOptionPane.ERROR_MESSAGE);
        }   
           
    }//GEN-LAST:event_deleteTemaActionPerformed

    private void deleteAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAlbumActionPerformed
        // TODO add your handling code here:
        //este boton confirma eliminar album de favorito
        
        String album = listaAlbumes.getSelectedValue();
        Long idalbumSeleccionado = null;
        
        for (Entry<Long, String> entry : this.albumsFavoritosDelCliente.entrySet()){
            if(entry.getValue().equals(album)){
                idalbumSeleccionado = entry.getKey();
                break;
            }
        }
        //Verifica si se selecciono Album
        if(album !=null && idalbumSeleccionado != null){
            try{
                this.controlador.EliminarAlbumFavorito(nickIngresado, idalbumSeleccionado);
                JOptionPane.showMessageDialog(null, "Album eliminado de favoritos", "Operacion Exitosa", JOptionPane.INFORMATION_MESSAGE);
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);  
            }
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione un Album.", "Error", JOptionPane.ERROR_MESSAGE);
        }   
          
        
        
    }//GEN-LAST:event_deleteAlbumActionPerformed

    private void deleteListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteListaActionPerformed
        // TODO add your handling code here:
        //este boton confirma eliminar list de favoritos
        String lista = listaLReproduccion.getSelectedValue();
        
       
        //Verifica si se selecciono Lista
        if(lista !=null ){
            try{
                this.controlador.EliminarListaFavorito(nickIngresado, lista);
                JOptionPane.showMessageDialog(null, "Lista de reproduccion eliminada de favoritos", "Operacion Exitosa", JOptionPane.INFORMATION_MESSAGE);
            }catch(Exception ex){
               // try {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                   // throw ex;
               // } catch (Exception ex1) {
                 //   Logger.getLogger(EliminarFavorito.class.getName()).log(Level.SEVERE, null, ex1);
                //}
            }
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione una Lista.", "Error", JOptionPane.ERROR_MESSAGE);
        }   
          
    }//GEN-LAST:event_deleteListaActionPerformed

    private void botonNickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNickActionPerformed
        inicializarJLists();
        nickIngresado = nickname.getText();
        if(!nickIngresado.equals("")){
            if(controlador.ExisteCliente(nickIngresado)){
                //obtengo los temas favoritos del cliente
                temasFavoritosDelCliente = controlador.getTemasFavCliente(nickIngresado);
                //obtengo las listas favoritas del cliente
                listasFavoritasDelCliente = controlador.getListasFavCliente(nickIngresado);
                //obtengo los albums favoritos del cliente
                albumsFavoritosDelCliente = controlador.getAlbumsFavCliente(nickIngresado);
                
                //recorro la lista de temas favoritos del cliente mientras lo agrego al modelo.
                //luego seteo el modelo a la jlist de temasfav
                if (!temasFavoritosDelCliente.isEmpty()) {
                    DefaultListModel<String> listaTemasF = new DefaultListModel<>();
                    for (String tema : temasFavoritosDelCliente.values()) {
                        listaTemasF.addElement(tema);
                    }
                    listaTemas.setModel(listaTemasF);
                }

                //recorro la lista de albums favoritos del cliente mientras lo agrego al modelo.
                //luego seteo el modelo a la jlist de albumesfav
                if (!albumsFavoritosDelCliente.isEmpty()) {
                    DefaultListModel<String> listaAlbumsF = new DefaultListModel<>();
                    for (String album : albumsFavoritosDelCliente.values()) {
                        listaAlbumsF.addElement(album);
                    }
                    listaAlbumes.setModel(listaAlbumsF);
                }
                //recorro la lista de listas de reproduccion favoritos del cliente mientras lo agrego al modelo.
                //luego seteo el modelo a la jlist de listasRfav
                if (!listasFavoritasDelCliente.isEmpty()) {
                    DefaultListModel<String> listaListasRepF = new DefaultListModel<>();
                    for (String lista : listasFavoritasDelCliente) {
                        listaListasRepF.addElement(lista);
                    }
                    listaLReproduccion.setModel(listaListasRepF);
                }
            }else{
                 JOptionPane.showMessageDialog(this, "El nickname ingresado no pertenece a un cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Ingrese nickname del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botonNickActionPerformed

    private void botonNickMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonNickMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_botonNickMouseClicked
    private void inicializarJLists(){
        DefaultListModel modelo = new DefaultListModel<>();
        listaAlbumes.setModel(modelo);
        listaTemas.setModel(modelo);
        listaLReproduccion.setModel(modelo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonNick;
    private javax.swing.JButton deleteAlbum;
    private javax.swing.JButton deleteLista;
    private javax.swing.JButton deleteTema;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listaAlbumes;
    private javax.swing.JList<String> listaLReproduccion;
    private javax.swing.JList<String> listaTemas;
    private javax.swing.JLabel nickLabel;
    private javax.swing.JTextField nickname;
    private javax.swing.JPanel pesAlbum;
    private javax.swing.JPanel pesLista;
    private javax.swing.JPanel pesTema;
    private javax.swing.JTabbedPane pestañas;
    // End of variables declaration//GEN-END:variables
}

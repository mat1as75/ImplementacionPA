package espotify.presentacion;

import espotify.DataTypes.DTAlbum_SinDTArtista;
import espotify.DataTypes.DTGenero;
import espotify.DataTypes.DTGenero_Simple;
import espotify.DataTypes.DTTemaConRuta;
import espotify.DataTypes.DTTemaConURL;
import espotify.DataTypes.DTTemaGenerico;
import espotify.logica.Fabrica;
import espotify.logica.IControlador;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class AltaAlbum extends javax.swing.JInternalFrame {

    private IControlador controlador;
    private String rutaImagenAlbum;
    private List<DTGenero_Simple> generosRegistrados;
    private List<String> nicknamesArtistasRegistrados;
    private List<DTGenero> dataGeneros = new ArrayList<DTGenero>();
    private DefaultListModel listaTemasAgregadosModel;
    private DefaultListModel listaGenerosAgregadosModel;
    private List<DTTemaGenerico> dataTemas = new ArrayList<DTTemaGenerico>();
    /**
     * Creates new form AltaAlbum
     */
    public AltaAlbum() {
        Fabrica fb = Fabrica.getInstance();
        controlador = fb.getControlador();
        this.cargarDatos();
        initComponents();
    }

    private void cargarDatos() {
        this.nicknamesArtistasRegistrados = controlador.getNicknamesArtistas();
        this.generosRegistrados = controlador.getListaDTGeneroSimple();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelArtista = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nombreAlbum = new javax.swing.JTextField();
        comboBoxArtistasRegistrados = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaGenerosAgregadosModel = new DefaultListModel();
        listaGenerosAgregados = new javax.swing.JList<>(listaGenerosAgregadosModel);
        jLabel6 = new javax.swing.JLabel();
        btnAgregarGeneroAAlbum = new javax.swing.JButton();
        btnRemoverGeneroDeAlbum = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        nombreTema = new javax.swing.JTextField();
        duracionTema = new javax.swing.JTextField();
        posicionTema = new javax.swing.JTextField();
        btnAgregarTema = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaTemasAgregadosModel = new DefaultListModel();
        listaTemasAgregados = new javax.swing.JList(listaTemasAgregadosModel);
        jLabel11 = new javax.swing.JLabel();
        btnRemoverTema = new javax.swing.JButton();
        btnCancelarAltaAlbum = new javax.swing.JButton();
        btnConfirmarAltaAlbum = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        anioAlbum = new com.toedter.calendar.JYearChooser();
        labelImagenAlbum = new javax.swing.JLabel();
        btnSeleccionarImagenAlbum = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        checkboxAccesoURL = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        urlTema = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlistGenerosRegistrados = new javax.swing.JList<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Alta de Álbum");

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ingrese los datos para agregar un nuevo álbum");

        jScrollPane3.setHorizontalScrollBar(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        jLabel2.setText("Nombre del álbum:");

        jLabel3.setText("Año de creación:");

        labelArtista.setText("Artista:");

        jLabel5.setText("Géneros: ");

        nombreAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreAlbumActionPerformed(evt);
            }
        });

        String[] arrayNicknamesArtistas = nicknamesArtistasRegistrados.toArray(new String[nicknamesArtistasRegistrados.size()]);
        comboBoxArtistasRegistrados.setModel(new javax.swing.DefaultComboBoxModel<>(arrayNicknamesArtistas));
        comboBoxArtistasRegistrados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxArtistasRegistradosActionPerformed(evt);
            }
        });

        listaGenerosAgregados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listaGenerosAgregados);

        jLabel6.setText("Generos añadidos:");

        btnAgregarGeneroAAlbum.setText("Añadir");
        btnAgregarGeneroAAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarGeneroAAlbumActionPerformed(evt);
            }
        });

        btnRemoverGeneroDeAlbum.setText("Remover");
        btnRemoverGeneroDeAlbum.setEnabled(false);
        btnRemoverGeneroDeAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverGeneroDeAlbumActionPerformed(evt);
            }
        });

        jLabel7.setText("Temas:");

        jLabel8.setText("Nombre:");

        jLabel9.setText("Duración:");

        jLabel10.setText("Posición:");

        nombreTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreTemaActionPerformed(evt);
            }
        });

        btnAgregarTema.setText("Añadir");
        btnAgregarTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTemaActionPerformed(evt);
            }
        });

        listaTemasAgregados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(listaTemasAgregados);

        jLabel11.setText("Temas añadidos:");

        btnRemoverTema.setText("Remover");
        btnRemoverTema.setEnabled(false);
        btnRemoverTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverTemaActionPerformed(evt);
            }
        });

        btnCancelarAltaAlbum.setText("Cancelar");
        btnCancelarAltaAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarAltaAlbumActionPerformed(evt);
            }
        });

        btnConfirmarAltaAlbum.setText("Confirmar");
        btnConfirmarAltaAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarAltaAlbumActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setToolTipText("");

        labelImagenAlbum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnSeleccionarImagenAlbum.setText("Seleccionar");
        btnSeleccionarImagenAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarImagenAlbumActionPerformed(evt);
            }
        });

        jLabel4.setText("Portada del álbum:");

        jLabel12.setText("Tipo de acceso:");

        checkboxAccesoURL.setText("URL");
        checkboxAccesoURL.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkboxAccesoURLStateChanged(evt);
            }
        });
        checkboxAccesoURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxAccesoURLActionPerformed(evt);
            }
        });

        jLabel13.setText("URL:");

        urlTema.setEnabled(false);
        urlTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTemaActionPerformed(evt);
            }
        });

        DefaultListModel<String> listaGenerosRegistradosModel = new DefaultListModel<>();
        for (espotify.DataTypes.DTGenero_Simple dataG : this.generosRegistrados) {
            if (!dataG.getNombreGenero().equals("Genero")) {
                listaGenerosRegistradosModel.addElement(dataG.getNombreGenero());
            }
        }
        jlistGenerosRegistrados.setModel(listaGenerosRegistradosModel);
        jScrollPane5.setViewportView(jlistGenerosRegistrados);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(labelArtista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(anioAlbum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nombreAlbum, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxArtistasRegistrados, javax.swing.GroupLayout.Alignment.LEADING, 0, 184, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSeleccionarImagenAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelImagenAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAgregarTema, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemoverTema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(duracionTema, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                                            .addComponent(posicionTema)))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)))
                            .addComponent(errorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(205, 205, 205))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(nombreTema, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAgregarGeneroAAlbum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(60, 60, 60))
                                    .addComponent(jScrollPane5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRemoverGeneroDeAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(btnCancelarAltaAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btnConfirmarAltaAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(urlTema))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(85, 85, 85)
                                    .addComponent(checkboxAccesoURL, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelImagenAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelArtista)
                                .addComponent(comboBoxArtistasRegistrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(nombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(anioAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSeleccionarImagenAlbum))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarGeneroAAlbum)
                    .addComponent(btnRemoverGeneroDeAlbum))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(nombreTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(duracionTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(posicionTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(checkboxAccesoURL))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(urlTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarTema)
                    .addComponent(btnRemoverTema))
                .addGap(18, 18, 18)
                .addComponent(errorLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmarAltaAlbum)
                    .addComponent(btnCancelarAltaAlbum))
                .addGap(12, 12, 12))
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private Boolean tieneNombreVacio(String nombre) {
        Boolean nombreVacio = nombre.equals("");
        
        if (nombreVacio) {
            errorLabel.setText("El nombre del album no puede estar vacio.");
        }
        
        return nombreVacio;
    }
    
     private Boolean validarPosicionesDeTemas() {
        Boolean posicionesSonValidas = true;
        int numeroTemas = this.dataTemas.size();
        
        for (DTTemaGenerico dt : this.dataTemas) {
            if (dt.getPosicionEnAlbum() > numeroTemas) {
                errorLabel.setText("Error: Existe al menos una posición de tema invalida.");
                posicionesSonValidas = false;
                break;
            }
        }
        return posicionesSonValidas;
    }
    
    private Boolean validarDuracion(String duracion) {
        //verifico que la duracion ingresada tenga el formato correcto 00:00 a 59:59
        String regex = "\\b([0-5]?[0-9]):(([0-5])([0-9]))\\b";
        if (!duracion.matches(regex)) {
            errorLabel.setText("Error: La duración ingresada no es válida.");
            return false;
        }
        return true;
    } 
    
    private Boolean validarNombreTemaRepetido(String nombre) {
        //verifico que no se agreguen nombres repetidos
        for (DTTemaGenerico dt : this.dataTemas) {
            if (dt.getNombreTema().equals(nombre)) {
                errorLabel.setText("Error: No se pueden repetir los nombres de los temas.");
                return false;
            }
        }
        return true;
    }
    
    private Boolean validarPosicionTema(String posicion) {
        int intPosicionTema = 0;
        
        //convierto el valor ingresado a int, puede capturar un error si intenta convertir un caracter no numerico
        try {
            intPosicionTema = Integer.valueOf(posicion);
            if (intPosicionTema < 1) {
                errorLabel.setText("Error: La posición ingresada no es válida.\n");
                return false;
            } else {
                //verifico que no se agreguen posiciones repetidas
                for (DTTemaGenerico dt : this.dataTemas) {
                    if (dt.getPosicionEnAlbum() == intPosicionTema) {
                        errorLabel.setText("Error: Al menos una posición ingresada está repetida.");
                        return false;
                    }
                }
            }
        } catch (NumberFormatException e){
           errorLabel.setText("Error: La posición ingresada no es un número.");
           return false;
        }
        return true;
    }
     
    private void btnAgregarTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTemaActionPerformed
        // capturo los datos del tema ingresados y lo agrego a la lista
        String nombre = nombreTema.getText().trim();
        String duracion = duracionTema.getText().trim();
        String stringPosicion = posicionTema.getText().trim();
        int intPosicionTema = 0;
        int duracionMinutos;
        int duracionSegundos;
        int duracionTotalSegundos;
        
        //tomo el url ingresado solo si el checkbox esta marcado
        String url = (checkboxAccesoURL.isSelected() ? urlTema.getText().trim() : "");
        
        // label para mostrar errores de ingreso de datos
        errorLabel.setText("");
       
        //si no hay errores en los datos del tema lo muevo a la lista de temas agregados y habilito el boton de remover
        if (validarPosicionTema(stringPosicion) 
                && validarNombreTemaRepetido(nombre) 
                && validarDuracion(duracion)) {
            
            //convierto a int la posicion
            intPosicionTema = Integer.valueOf(stringPosicion);

            //extraigo los minutos y segundos por separados y convierto a int
            duracionMinutos = Integer.valueOf(
                duracion.substring(0,duracion.indexOf(":"))
            );
            duracionSegundos = Integer.valueOf(
                duracion.substring(duracion.indexOf(":")+1)
            );
            duracionTotalSegundos = duracionMinutos * 60 + duracionSegundos;

            //creo datatype
            DTTemaGenerico nuevoDataTema;
            if (checkboxAccesoURL.isSelected()) {
                nuevoDataTema = new DTTemaConURL(nombre,duracionTotalSegundos,intPosicionTema,url);
            } else {
                nuevoDataTema = new DTTemaConRuta("", nombre, duracionTotalSegundos, intPosicionTema);
            }
            dataTemas.add(nuevoDataTema);
            String datos = nuevoDataTema.toString();
            listaTemasAgregadosModel.addElement(datos);
            btnRemoverTema.setEnabled(true);
        }
    }//GEN-LAST:event_btnAgregarTemaActionPerformed

    private void nombreTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTemaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreTemaActionPerformed

    private Boolean validarNombreGeneroRepetido(String nombre) {
        //verifico que no haya sido agregado
        for (DTGenero dataGen : this.dataGeneros) {
            if (dataGen.getNombreGenero().equals(nombre)) {
                errorLabel.setText("El genero seleccionado ya fue agregado.");
                return false;
            }
        }
        return true;
    }
    
    private void btnAgregarGeneroAAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarGeneroAAlbumActionPerformed
        String generoSeleccionado = jlistGenerosRegistrados.getSelectedValue();
        errorLabel.setText("");
        
        if (generoSeleccionado.equals("")) {
            errorLabel.setText("Debe seleccionar un genero antes de agregar.");
        } else {
            if (validarNombreGeneroRepetido(generoSeleccionado)) {
                dataGeneros.add(new DTGenero(generoSeleccionado));
                listaGenerosAgregadosModel.addElement(generoSeleccionado);
                btnRemoverGeneroDeAlbum.setEnabled(true);
            }
        }        
    }//GEN-LAST:event_btnAgregarGeneroAAlbumActionPerformed

    private void nombreAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreAlbumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreAlbumActionPerformed

    private void comboBoxArtistasRegistradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxArtistasRegistradosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxArtistasRegistradosActionPerformed

    private void btnRemoverGeneroDeAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverGeneroDeAlbumActionPerformed
        int indiceGeneroSeleccionado = listaGenerosAgregados.getSelectedIndex();
        String nombreGeneroSeleccionado = listaGenerosAgregados.getSelectedValue();
        
        if (indiceGeneroSeleccionado != -1) {
            listaGenerosAgregadosModel.remove(indiceGeneroSeleccionado);
            for (DTGenero dataGenero : this.dataGeneros) {
                if (dataGenero.getNombreGenero().equals(nombreGeneroSeleccionado)) {
                    this.dataGeneros.remove(dataGenero);
                    break;
                }
            }

            if (listaGenerosAgregadosModel.getSize() == 0) {
                btnRemoverGeneroDeAlbum.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btnRemoverGeneroDeAlbumActionPerformed

    private void btnRemoverTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverTemaActionPerformed
        int indiceTemaSeleccionado = listaTemasAgregados.getSelectedIndex();
        String datosTemaSeleccionado = listaTemasAgregados.getSelectedValue();
        
        if (indiceTemaSeleccionado != -1) {
            listaTemasAgregadosModel.remove(indiceTemaSeleccionado);
            for (DTTemaGenerico dataTema : this.dataTemas) {
                if (datosTemaSeleccionado.contains(dataTema.getNombreTema())) {
                    this.dataTemas.remove(dataTema);
                    break;
                }
            }

            if (listaTemasAgregadosModel.getSize() == 0) {
                btnRemoverTema.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btnRemoverTemaActionPerformed

    private void btnSeleccionarImagenAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarImagenAlbumActionPerformed
        JFileChooser buscarArchivo = new JFileChooser();
        FileNameExtensionFilter extension = new FileNameExtensionFilter("Seleccionar imagen", "jpg", "png");
        buscarArchivo.setFileFilter(extension);

        if (buscarArchivo.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = buscarArchivo.getSelectedFile();
            String ruta = selectedFile.getAbsolutePath();
            
            File destino = new File("./Resource/portadasAlbum");
            if (!destino.exists()) {
                destino.mkdirs();
            }

            File destinoArchivo = new File(destino, selectedFile.getName());
            
            try {
                Files.copy(selectedFile.toPath(), destinoArchivo.toPath(), StandardCopyOption.REPLACE_EXISTING);
                Toolkit tool = Toolkit.getDefaultToolkit();
                Image imagen = tool.createImage(ruta);
                labelImagenAlbum.setIcon(new ImageIcon(imagen.getScaledInstance(labelImagenAlbum.getWidth(), labelImagenAlbum.getHeight(), Image.SCALE_AREA_AVERAGING)));
                this.rutaImagenAlbum = ruta;
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(
                        null, 
                        ex.getMessage(), 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            };
        };
    }//GEN-LAST:event_btnSeleccionarImagenAlbumActionPerformed

    private void btnCancelarAltaAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarAltaAlbumActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarAltaAlbumActionPerformed

    private void urlTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTemaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlTemaActionPerformed

    private void checkboxAccesoURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxAccesoURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkboxAccesoURLActionPerformed

    private void checkboxAccesoURLStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkboxAccesoURLStateChanged
        if (checkboxAccesoURL.isSelected()) {
            urlTema.setEnabled(true);
        } else {
            urlTema.setEnabled(false);
        }
    }//GEN-LAST:event_checkboxAccesoURLStateChanged
    
    private void btnConfirmarAltaAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarAltaAlbumActionPerformed
        String nombre = nombreAlbum.getText().trim();
        int anioAlb = anioAlbum.getValue();
        String fotoAlb = this.rutaImagenAlbum;
        String nombreArt = String.valueOf(comboBoxArtistasRegistrados.getSelectedItem());
        
        if (validarPosicionesDeTemas() && !tieneNombreVacio(nombre) && !nombreArt.equals("")) {
            DTAlbum_SinDTArtista dataAlbum = new DTAlbum_SinDTArtista(
                nombre, anioAlb, fotoAlb, 
                this.dataTemas, this.dataGeneros, nombreArt
            );
            
            try {
                controlador.AltaAlbum(dataAlbum);
                JOptionPane.showMessageDialog(
                        null, 
                        "Album creado exitosamente.", 
                        "Operacion exitosa", 
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                        null, 
                        ex.getMessage(), 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            }
            this.dispose();
            
        }
        
        
        
        
        
    }//GEN-LAST:event_btnConfirmarAltaAlbumActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JYearChooser anioAlbum;
    private javax.swing.JButton btnAgregarGeneroAAlbum;
    private javax.swing.JButton btnAgregarTema;
    private javax.swing.JButton btnCancelarAltaAlbum;
    private javax.swing.JButton btnConfirmarAltaAlbum;
    private javax.swing.JButton btnRemoverGeneroDeAlbum;
    private javax.swing.JButton btnRemoverTema;
    private javax.swing.JButton btnSeleccionarImagenAlbum;
    private javax.swing.JCheckBox checkboxAccesoURL;
    private javax.swing.JComboBox<String> comboBoxArtistasRegistrados;
    private javax.swing.JTextField duracionTema;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList<String> jlistGenerosRegistrados;
    private javax.swing.JLabel labelArtista;
    private javax.swing.JLabel labelImagenAlbum;
    private javax.swing.JList<String> listaGenerosAgregados;
    private javax.swing.JList<String> listaTemasAgregados;
    private javax.swing.JTextField nombreAlbum;
    private javax.swing.JTextField nombreTema;
    private javax.swing.JTextField posicionTema;
    private javax.swing.JTextField urlTema;
    // End of variables declaration//GEN-END:variables
}

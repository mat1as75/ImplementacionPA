package espotify.presentacion;

import espotify.DataTypes.DTTemaSimple;
import espotify.logica.Fabrica;
import espotify.logica.IControlador;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class QuitarTemaDeLista extends javax.swing.JInternalFrame {
    
    private final IControlador controlador;
    private DefaultComboBoxModel comboBoxListasRepModel = new DefaultComboBoxModel();
    private DefaultComboBoxModel comboBoxClientesModel = new DefaultComboBoxModel();
    private DefaultListModel jlistTemasModel = new DefaultListModel();
    private List<String> nicknamesClientes;
    private List<String> nombresListasRep;
    private Map<Long, DTTemaSimple> mapTemas = new HashMap();
    /**
     * Creates new form QuitarTemaDeLista
     */
    public QuitarTemaDeLista() {
        Fabrica fb = Fabrica.getInstance();
        controlador = fb.getControlador();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxTipoDeLista = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();
        labelError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxListasRep = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        comboBoxClientes = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistTemas = new javax.swing.JList<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Quitar Tema de Lista");

        jLabel1.setText("Seleccione la lista a la cual le desea remover un tema:");

        jLabel2.setText("Tipo de lista:");

        comboBoxTipoDeLista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Lista por defecto", "Lista particular" }));
        comboBoxTipoDeLista.setMinimumSize(new java.awt.Dimension(300, 24));
        comboBoxTipoDeLista.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTipoDeListaItemStateChanged(evt);
            }
        });
        comboBoxTipoDeLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTipoDeListaActionPerformed(evt);
            }
        });

        jLabel5.setText("Seleccione el tema que desea remover:");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        labelError.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setText("Lista:");

        comboBoxListasRep.setEnabled(false);
        comboBoxListasRep.setMinimumSize(new java.awt.Dimension(300, 24));
        comboBoxListasRep.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxListasRepItemStateChanged(evt);
            }
        });

        jLabel4.setText("Cliente:");

        comboBoxClientes.setEnabled(false);
        comboBoxClientes.setMinimumSize(new java.awt.Dimension(300, 24));
        comboBoxClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClientesItemStateChanged(evt);
            }
        });
        comboBoxClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClientesActionPerformed(evt);
            }
        });

        jlistTemas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlistTemas.setEnabled(false);
        jlistTemas.setMaximumSize(new java.awt.Dimension(550, 0));
        jScrollPane1.setViewportView(jlistTemas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelError, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(comboBoxListasRep, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(comboBoxTipoDeLista, 0, 386, Short.MAX_VALUE)
                                .addComponent(comboBoxClientes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxTipoDeLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxListasRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(labelError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnConfirmar))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed
    
    private void cargarTemas() {
        jlistTemasModel.removeAllElements();
        
        if (comboBoxListasRep.getSelectedItem() != null) {
            String tipoDeLista = comboBoxTipoDeLista.getSelectedItem().toString();
            String nombreLista = comboBoxListasRep.getSelectedItem().toString();
            
            if (tipoDeLista.equals("Lista particular")) {
                mapTemas = controlador.getDTTemasDeListaParticular(nombreLista);
            } else if (tipoDeLista.equals("Lista por defecto")) {
                mapTemas = controlador.getDTTemasDeListaPorDefecto(nombreLista);
            } else {
                if (mapTemas != null) mapTemas.clear();
            }
            
            for (Entry<Long, DTTemaSimple> dataTema : mapTemas.entrySet()) {
                jlistTemasModel.addElement(dataTema.getValue().getDatosTemaToString());
            }
            jlistTemas.setModel(jlistTemasModel);
        }
    }
    
    private void cargarClientes() {
        nicknamesClientes = controlador.getNicknamesClientes();
        comboBoxClientesModel.removeAllElements();
        
        for (String nickname : nicknamesClientes) {
            comboBoxClientesModel.addElement(nickname);
        }
        comboBoxClientes.setModel(comboBoxClientesModel);
    }
    
    private void cargarListasPorDefecto() {
        nombresListasRep = controlador.getNombresListasPorDefecto();
        comboBoxListasRepModel.removeAllElements();
        
        for (String nombreL : nombresListasRep) {
            comboBoxListasRepModel.addElement(nombreL);
        }
        comboBoxListasRep.setModel(comboBoxListasRepModel);
        cargarTemas();
    }
    
    private void cargarListasParticulares() {
        comboBoxListasRepModel.removeAllElements();
     
        if (comboBoxClientes.getSelectedItem() != null) {
            String nickname = comboBoxClientes.getSelectedItem().toString();
            try {
                nombresListasRep = controlador.getNombresListasParticularesDeCliente(nickname);
                for (String nombreL : nombresListasRep) {
                    comboBoxListasRepModel.addElement(nombreL);
                }
                comboBoxListasRep.setModel(comboBoxListasRepModel);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                    null, 
                    ex.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        cargarTemas();
    }
    
    private void comboBoxTipoDeListaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTipoDeListaItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            if (comboBoxTipoDeLista.getSelectedItem() != null) {
                String seleccion = comboBoxTipoDeLista.getSelectedItem().toString();
                
                if (seleccion.equals("Lista por defecto")) {
                    comboBoxClientes.setEnabled(false);
                    comboBoxListasRep.setEnabled(true);
                    jlistTemas.setEnabled(true);
                    cargarListasPorDefecto();
                } else if (seleccion.equals("Lista particular")) {
                    comboBoxClientes.setEnabled(true);
                    comboBoxListasRep.setEnabled(true);
                    jlistTemas.setEnabled(true);
                    cargarClientes();
                    cargarListasParticulares();
                } else {
                    comboBoxClientes.setEnabled(false);
                    comboBoxListasRep.setEnabled(false);
                    jlistTemas.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_comboBoxTipoDeListaItemStateChanged

    private void comboBoxClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxClientesActionPerformed

    private void comboBoxTipoDeListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTipoDeListaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTipoDeListaActionPerformed

    private void comboBoxClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClientesItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cargarListasParticulares();
        }
    }//GEN-LAST:event_comboBoxClientesItemStateChanged

    private void comboBoxListasRepItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxListasRepItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cargarTemas();
        }
    }//GEN-LAST:event_comboBoxListasRepItemStateChanged

    private Boolean validarSelecciones() {
        
        Boolean seleccionoTipoLista = (comboBoxTipoDeLista.getSelectedItem() != null);
        Boolean seleccionoLista = (comboBoxListasRep.getSelectedItem() != null);
        Boolean seleccionoTema = (jlistTemas.getSelectedValue() != null);
        
        if  (!seleccionoTipoLista || !seleccionoLista || !seleccionoTema) {
            JOptionPane.showMessageDialog(
                        null, 
                        "Debe seleccionar la lista y el tema.", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }        
    
    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        
        if (validarSelecciones()) {
            String tipoDeLista = comboBoxTipoDeLista.getSelectedItem().toString();
            String nombreLista = comboBoxListasRep.getSelectedItem().toString();
            String datosTema = jlistTemas.getSelectedValue();
            Long idTema = null;

            for (Entry<Long, DTTemaSimple> dataTema : mapTemas.entrySet()) {
                if (dataTema.getValue().getDatosTemaToString().equals(datosTema)) {
                    idTema = dataTema.getKey();
                    break;
                }
            }
        
            try {
                controlador.quitarTemaDeLista(idTema, nombreLista);
                JOptionPane.showMessageDialog(
                            null, 
                            "El tema [" + idTema + "] fue removido exitosamente de la lista [" + nombreLista + "].", 
                            "Operación exitosa", 
                            JOptionPane.INFORMATION_MESSAGE);
                cargarTemas();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                            null, 
                            ex.getMessage(), 
                            "Error", 
                            JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JComboBox<String> comboBoxClientes;
    private javax.swing.JComboBox<String> comboBoxListasRep;
    private javax.swing.JComboBox<String> comboBoxTipoDeLista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> jlistTemas;
    private javax.swing.JLabel labelError;
    // End of variables declaration//GEN-END:variables
}
